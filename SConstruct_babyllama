import os
import os.path
import json

from steamroller import Environment


vars = Variables("custom.py")
vars.AddVariables(
    # Gutenberg data
    ("DATA_ROOT", "", os.path.expanduser("~/corpora")),
    ("GUTENBERG_PATH", "", "${DATA_ROOT}/gutenberg/"),
    ("PG_CATALOG", "", "data/pg_catalog.csv"),

    # SPARQL query
    ("SPARQL_QUERY","", "data/en_authors.txt"),
    
    # Filter settings
    ("P1_THRESH", "", 90), #similarity threshold for pass 1 of fuzzy matching, paried with bd_thresh
    ("P2_THRESH", "", 101), #similarity threshold for pass 2 of fuzzy matching, used alone
    ("BD_THRESH", "", 5), #allowed birthdate delta
    ("OMIT_AUTHORS","",[]), #temporary measure to omit a given author, uses WD authorname
    # TODO: max works is 1 to reduce token numbers for preliminary training
    ("MAX_WORKS","", 20), #maximum number of works per author for data balancing purposes
    ("FOLDS", "", 1),
    # Time settings
    ("TIME_SLICES", "", [(1750, 1820), (1820, 1850), (1850, 1880), (1880, 1910), (1910, 1940)]),
    #work date filter inference settings
    ("USE_INFERENCE", "", True), # use inference to filter works and determined work creation dates
    ("USE_DATES_FILE", "", True),
    ("DATES_FILE","", "data/gb_authors_dates_1950.jsonl"), #used if USE_DATES_FILE is True
    ("WORK_MODEL", "", "meta-llama/Llama-3.3-70B-Instruct"),
    ("WORK_PROMPT", "", "data/work_date_prompt.txt"),
    ("HISTORICAL_DATA", "", "data/minimal_pairs_new.csv"),

    # BLIMP settings
    ("MIN_OCCURRENCE_BLIMP", "", 2),
    ("MIN_OCCURRENCE_EVALUATION", "", 2),

    # SLURM settings
    ("CPU_QUEUE", "", "some_queue"),
    ("CPU_ACCOUNT", "", "some_account"),    
    ("GPU_QUEUE", "", "another_queue"),
    ("GPU_ACCOUNT", "", "another_account"),
    ("GPU_COUNT", "", 1),
    ("ORIGINAL_WORK_DIR", "", "work_times_babyllama"),
    ("WORK_DIR", "", "work_times_babyllama"),

    # Data Split settings
    # TODO: change splits back to 0.7, 0.1, 0.2
    ("TRAIN_PORTION", "", 10000000),
    ("DEV_PORTION", "", 1000000),
    ("TEST_PORTION", "", 5000000),
    ("SPLIT_STYLE", "", "count"), #percent or count
    ("SPLIT_LEVEL", "", "paragraph"), # can be sentence, paragraph, or chapter.
    # Random Seed
    ("RANDOM_SEED", "", 42),

    # Wandb settings
    ("USE_WANDB", "", True),
    ("WANDB_PROJECT", "", "BabyLlama_2_randomization_teachers"),

    # Training
    ("TRAINER_CONFIG_1", "", "config/llama-smoll-345M.yaml"),
    ("TRAINER_CONFIG_2", "", "config/llama-smoll-345M.yaml"),
    ("STUDENT_CONFIG", "", "config/llama-smoll-345M.yaml"),

    # STEAMROLLER settings
    ("STEAMROLLER_ENGINE", "", "slurm"),
    ("CPU_QUEUE", "", "parallel"),
    ("CPU_ACCOUNT", "", "tlippin1"),    
    ("GPU_QUEUE", "", "a100"),
    ("GPU_ACCOUNT", "", "tlippin1_gpu"),
    ("GPU_COUNT", "", 1),
    ("MEMORY", "", "64GB")
)

env = Environment(
    variables=vars,
    BUILDERS={
        "GenerateQuery" : Builder(
              action="python scripts/generate_query.py --output ${TARGET} --end_time ${MAX_CUTOFF}"
        ),
        "QueryWD" : Builder(
              action="python scripts/author_gather_metadata.py --sparql ${SOURCES} --output ${TARGETS}"
	    ),
	    "GBAuthorFuzzy": Builder(
	      action="python scripts/author_gb_fuzzy.py "
	             "--input ${SOURCES} --output ${TARGETS} "
		     "--pg_catalog ${PG_CATALOG} "
		     "--author_omit ${OMIT_AUTHORS} "
		     "--p1_thresh ${P1_THRESH} --p2_thresh ${P2_THRESH} --bd_thresh ${BD_THRESH} --random_state ${RANDOM_SEED}"
        ),
        "AttributeDates": Builder(
            action="python scripts/work_dates.py "
            "--input ${SOURCES} --output ${TARGETS} "
            "--model ${WORK_MODEL} --prompt ${WORK_PROMPT} --quant_4"
        ),
        "FilterAndSampleWorks": Builder(
            action="python scripts/sample_works.py "
            "--input ${SOURCES} --output ${TARGETS} "
            "--cutoff_start ${WORK_CUTOFF_START} "
            "--cutoff_end ${WORK_CUTOFF_END} --max_works ${MAX_WORKS} --filter_birth_death"
        ),

        "ExtractAuthorWorksFromPG" : Builder(
			action = (
       			"python scripts/extract_author_works_from_gutenberg.py "
				"--input ${SOURCES} "
				"--gutenberg_path ${GUTENBERG_PATH} "
				"--output ${TARGETS}"
			)
   
		),
        "ExtractDocStructures" : Builder(
			action = (
				"python scripts/extract_doc_structures.py "
				"--input ${SOURCES} "
				"--output ${TARGETS}"
			)
		),
        "TrainingSplit" : Builder(
            action = (
                "python scripts/train_test_val.py "
                "--input ${SOURCES} "
                "--output_train ${TARGETS[0]} "
                "--output_dev ${TARGETS[1]} "
                "--output_test ${TARGETS[2]} "
                "--train_portion ${TRAIN_PORTION} "
                "--dev_portion ${DEV_PORTION} "
                "--test_portion ${TEST_PORTION} "
                "--random_seed ${RANDOM_SEED} "
                "--split_level ${SPLIT_LEVEL} "
		        "--split_style ${SPLIT_STYLE}"
            )
        ),
        "TrainTokenizer" : Builder(
            action = (
                "python scripts/train_tokenizer.py "
                "--input ${SOURCES} "
                "--output ${TARGETS}"
            )
        ),
	    "TokenizeSplit" : Builder(
            action = (
                "python scripts/tokenize_split.py "
                "--input ${SOURCES[0]} "
                "--tokenizer ${SOURCES[1]} "
                "--output ${TARGETS}"
            )
        ),
        "TrainTeacher" : Builder(
            interpreter = "accelerate launch",
            action = (
                "python scripts/train_teacher.py "
                "--train_data ${SOURCES[0]} "
                "--eval_data ${SOURCES[1]} "
                "--tokenizer_path ${SOURCES[2]} "
                "--config ${CONFIG} "
                #"--lr ${LR} "
                "--random_seed ${RANDOM_SEED} "
                "--use_wandb ${USE_WANDB} "
                "--wandb_project ${WANDB_PROJECT} "
                "--wandb_name ${WANDB_NAME} "
                "--output_dir ${TARGET}"
            )
        ),
        "DistillTrainStudent" : Builder(
            action = (
                "python scripts/distill_train_student.py "
                "--train_data ${SOURCES[0]} "
                "--eval_data ${SOURCES[1]} "
                "--tokenizer_path ${SOURCES[2]} "
                "--teacher_dir_1 ${SOURCES[3]} "
                "--teacher_dir_2 ${SOURCES[4]} "
                "--config ${CONFIG} "
                #"--lr ${LR} "
                "--random_seed ${RANDOM_SEED} "
                "--use_wandb ${USE_WANDB} "
                "--wandb_project ${WANDB_PROJECT} "
                "--wandb_name ${WANDB_NAME} "
                "--output_dir ${TARGET}"
            )
        ),
        "Evaluate" : Builder(
            action = (
                "python scripts/evaluate.py "
                "--test_data ${SOURCES[0]} "
                "--tokenizer_path ${SOURCES[1]} "
                "--teacher_dir_1 ${SOURCES[2]} "
                "--teacher_dir_2 ${SOURCES[3]} "
                "--student_dir ${SOURCES[4]} "
                "--report ${TARGET}"
            )
        ),
        "BLIMP_to_CSV" : Builder(
            action = (
                "python scripts/blimp_to_csv.py "
                "--blimp_directories ${SOURCES} "
                "--blimp_identifiers ${IDENTIFIERS} "
                "--output_directory ${TARGET}"
            )
        ),
        "START_EVALUATION" : Builder(
            action = (
                "python scripts/start_evaluation.py "
                "--model_dir ${SOURCES[0]} "
                "--tasks ${TASK} "
                "--output ${TARGET}"
            )
        ),
        "FILTER_EVALUATION" : Builder(
            action = (
                "python scripts/filter_evaluation.py "
                "--data ${SOURCES[1:]} "
                "--evaluation_result ${SOURCES[0]} "
                "--min_occurrence ${MIN_OCCURRENCE_EVALUATION} "
                "--output ${TARGET} "
            )
        ),
        "BLIMP" : Builder(
            action = (
                "python scripts/start_blimp.py "
                "--model_dir ${SOURCES[0]} "
                "--evaluation_result ${SOURCES[1]} "
                "--tasks blimp_filtered "
                "--output ${TARGET}"
            )
        ),
        "FILTER_BLIMP" : Builder(
            action = (
                "python scripts/filter_blimp.py "
                "--data ${SOURCES[1:]} "
                "--blimp_dir ${SOURCES[0]} "
                "--min_occurrence ${MIN_OCCURRENCE_BLIMP} "
                "--output ${TARGET} "
            )
        ),
        "EWOK" : Builder(
            action = (
                "python scripts/start_ewok.py "
                "--model_dir ${SOURCES} "
                "--output ${TARGET}"
            )
        ),
        "SuperGLUE" : Builder(
            action = (
                "python scripts/start_glue.py "
                "--model_dir ${SOURCES} "
                "--output ${TARGET}"
            )
        ),
        "CrossTimePerplexity" : Builder(
            action = (
                "python scripts/cross_time_perplexity.py "
                "--models ${MODELS} "
                "--test_sets ${TEST_SETS} "
                "--tokenizers ${TOKENIZERS} "
                "--time_data ${TIME_DATA} "
                "--output ${TARGET}"
            )
        ),
        "HistoricalMinimalPairs": Builder(
			action = (
				"python scripts/start_historical_mp.py "
				"--model_dir ${SOURCES} "
                "--output ${TARGET}"
			)
		),
        "HistoricalTest" : Builder(
            action = (
                "python scripts/evaluate_minimal_pairs.py "
                "--model_dir ${SOURCES[0]} "
                "--minimal_pairs ${HISTORICAL_DATA} "
                "--tokenizer ${SOURCES[1]} "
                "--report ${TARGET}"
            )
        ),
        "HISTORICAL_to_CSV" : Builder(
            action = (
                "python scripts/historical_to_csv.py "
                "--historical_directories ${SOURCES} "
                "--historical_identifiers ${IDENTIFIERS} "
                "--output_directory ${TARGET}"
            )
        ),
        
    }
)

def cpu_task_config(name, time_required, memory_required=env["MEMORY"]):
    return {
        "STEAMROLLER_ACCOUNT": env["CPU_ACCOUNT"],
        "STEAMROLLER_QUEUE": env["CPU_QUEUE"],
        "STEAMROLLER_TIME": time_required,
        "STEAMROLLER_MEMORY": memory_required,
        "STEAMROLLER_NAME_PREFIX": f"{name}",
        "STEAMROLLER_ENGINE": env["STEAMROLLER_ENGINE"],
    }

def gpu_task_config(name, time_required, memory_required=env["MEMORY"]):
    return {
        "STEAMROLLER_ACCOUNT": env["GPU_ACCOUNT"],
        "STEAMROLLER_QUEUE": env["GPU_QUEUE"],
        "STEAMROLLER_TIME": time_required,
        "STEAMROLLER_MEMORY": memory_required,
        "STEAMROLLER_NAME_PREFIX": f"{name}",
        "STEAMROLLER_ENGINE": env["STEAMROLLER_ENGINE"],
        "STEAMROLLER_GPU_COUNT": env["GPU_COUNT"],
    }




if not env["USE_DATES_FILE"]:
   max_date = max([int(x[1]) for x in env["TIME_SLICES"]])
   input = env.GenerateQuery(   source= None,
                                target = "${WORK_DIR}/authors.txt", 
                                MAX_CUTOFF = max_date,
                                **cpu_task_config("GenerateQuery", "00:30:00", "4GB"))

   query_res = env.QueryWD(source = input, target = "${WORK_DIR}/author_query.jsonl", **cpu_task_config("QueryWD", "00:30:00", "24GB"))

   gb_authors = env.GBAuthorFuzzy(source = query_res, target = "${WORK_DIR}/gb_authors.jsonl", **cpu_task_config("GBAuthorFuzzy", "00:30:00", "24GB"))

   if env["USE_INFERENCE"]:
      gb_authors = env.AttributeDates(source = gb_authors, target = "${WORK_DIR}/gb_authors_dates.jsonl", **gpu_task_config("AttributeDates", "12:30:00", "24GB"))
else:
    gb_authors = env.File(env["DATES_FILE"])


all_data = []

for time_slice in env["TIME_SLICES"]:
    env["WORK_DIR"] = env["ORIGINAL_WORK_DIR"] + "/" + str(time_slice[0]) + "_" + str(time_slice[1])
    gb_authors_filtered = env.FilterAndSampleWorks(  source = gb_authors, 
                                            target = "${WORK_DIR}/gb_authors_dates_filtered.jsonl",
                                            WORK_CUTOFF_START = time_slice[0],
                                            WORK_CUTOFF_END = time_slice[1],
                                            **cpu_task_config("FilterAndSampleWorks", "00:30:00", "24GB"))

    authors_and_extracted_works = env.ExtractAuthorWorksFromPG(
        source = gb_authors_filtered, # filtered_authors
        target = "${WORK_DIR}/authors_and_extracted_works.jsonl",
        **cpu_task_config("ExtractAuthorWorksFromPG", "00:30:00", "24GB")
    )

    extracted_structures = env.ExtractDocStructures(
        source = authors_and_extracted_works,
        target = "${WORK_DIR}/extracted_structures.jsonl",
        **cpu_task_config("ExtractDocStructures", "00:30:00", "24GB")
    )

    train_dev_test = env.TrainingSplit(
        source = extracted_structures,
        target = ["${WORK_DIR}/data.train", "${WORK_DIR}/data.dev", "${WORK_DIR}/data.test"],
        **cpu_task_config("TrainingSplit", "00:30:00", "24GB")
    )

    tokenizer = env.TrainTokenizer(
        source = train_dev_test[0],
        target = Dir(f"{env['WORK_DIR']}/tokenizer"),
        **cpu_task_config("TrainTokenizer", "00:30:00", "24GB")
    )

    tokenized_train_dev_test = []
    for data_split in train_dev_test:
        tokenized_train_dev_test.append(env.TokenizeSplit(
            source = [data_split, tokenizer],
            target = str(data_split) + ".pt",
            **cpu_task_config("TokenizeSplit", "01:30:00", "24GB")
    ))

    train_data, dev_data, test_data = tokenized_train_dev_test

    teacher_1 = env.TrainTeacher(
        source = [train_data, dev_data, tokenizer],
        target = Dir(f"{env['WORK_DIR']}/teacher_1"),
        CONFIG = env["TRAINER_CONFIG_1"],
        WANDB_NAME = f"Teacher_1_{time_slice[0]}_{time_slice[1]}",
        **gpu_task_config("TrainTeacher1", "03:30:00", "24GB")
    )

    teacher_2 = env.TrainTeacher(
        source = [train_data, dev_data, tokenizer],
        target = Dir(f"{env['WORK_DIR']}/teacher_2"),
        CONFIG = env["TRAINER_CONFIG_2"],
        WANDB_NAME = f"Teacher_2_{time_slice[0]}_{time_slice[1]}",
        RANDOM_SEED = env["RANDOM_SEED"] + 1,
        **gpu_task_config("TrainTeacher2", "03:30:00", "24GB")
    )

    student = env.DistillTrainStudent(
        source = [train_data, dev_data, tokenizer, teacher_1, teacher_2],
        target = Dir(f"{env['WORK_DIR']}/student"),
        CONFIG = env["STUDENT_CONFIG"],
        WANDB_NAME = f"Student_{time_slice[0]}_{time_slice[1]}",
        **gpu_task_config("DistillTrainStudent", "06:30:00", "24GB")
    )

    env.Evaluate(
        source = [test_data, tokenizer, teacher_1, teacher_2, student],
        target = "${WORK_DIR}/evaluation_report.txt",
        **gpu_task_config("Evaluate", "01:30:00", "24GB")
    )
    all_data.append((time_slice, train_dev_test, tokenized_train_dev_test, tokenizer, student, teacher_1, teacher_2, env["WORK_DIR"]))


all_training_texts = [data[1][0] for data in all_data]


all_evaluation_results = {}

for time_slice, train_dev_test, tokenized_train_dev_test, tokenizer, student, teacher_1, teacher_2, work_dir in all_data:
    for model, name in [(student, "student"), (teacher_1, "teacher_1"), (teacher_2, "teacher_2")]:
        for task_name in ["blimp", "ewok_filtered", "historical_mp"]:
            task_result = env.START_EVALUATION(
                source = [model],
                target = f"{work_dir}/{name}_eval/{task_name}/{task_name}_results.json",
                TASK = task_name,
                **gpu_task_config(f"{task_name}_{name}", "01:30:00", "24GB")
            )
            filtered_result = env.FILTER_EVALUATION(
                source = [task_result, train_dev_test[0]],
                target = f"{work_dir}/{name}_eval/{task_name}_filtered/{task_name}_results.json",
                MIN_OCCURRENCE = env["MIN_OCCURRENCE_EVALUATION"],
                **cpu_task_config(f"FILTER_{task_name}_{name}", "00:30:00", "24GB")
            )
            maximal_filtered_result = env.FILTER_EVALUATION(
                source = [task_result, all_training_texts],
                target = f"{work_dir}/{name}_eval/{task_name}_maximal_filtered/{task_name}_results.json",
                MIN_OCCURRENCE = env["MIN_OCCURRENCE_EVALUATION"],
                **cpu_task_config(f"MAX_FILTER_{task_name}_{name}", "00:30:00", "24GB")
            )
            if task_name not in all_evaluation_results:
                all_evaluation_results[task_name] = []
            

            all_evaluation_results[task_name].append((task_result, f"{name}_{time_slice[0]}_{time_slice[1]}"))
            all_evaluation_results[task_name].append((filtered_result, f"{name}_{time_slice[0]}_{time_slice[1]}_filtered"))
            all_evaluation_results[task_name].append((maximal_filtered_result, f"{name}_{time_slice[0]}_{time_slice[1]}_maximal_filtered"))



all_blimp = [x[0] for x in all_evaluation_results["blimp"]]
all_identifiers = [x[1] for x in all_evaluation_results["blimp"]]

env.BLIMP_to_CSV(
        source = all_blimp,
        target = "${ORIGINAL_WORK_DIR}/combined_BLIMP_filtered/blimp_results.csv",
        IDENTIFIERS = all_identifiers,
        **cpu_task_config("BLIMP_to_CSV", "00:30:00", "24GB")
    )

all_students = [x[4] for x in all_data]
all_test_sets = [x[1][2] for x in all_data]
all_tokenizers = [x[3] for x in all_data]
all_time_data = [f"{x[0][0]}_{x[0][1]}" for x in all_data]

env.CrossTimePerplexity(
    source = [all_students, all_test_sets, all_tokenizers],
    target = "${ORIGINAL_WORK_DIR}/cross_time_perplexity/results.json",
    TIME_DATA = all_time_data,
    MODELS = all_students,
    TEST_SETS = all_test_sets,
    TOKENIZERS = all_tokenizers,
    **gpu_task_config("CrossTimePerplexity", "01:30:00", "48GB")
)
"""
historical_data = []
for model, test_set, tokenizer, time_data in all_test_data:
    result = env.HistoricalTest(
        source = [model, tokenizer],
        target = f"{env['ORIGINAL_WORK_DIR']}/historical_test/{time_data}/results.json",
    )
    historical_data.append((result, time_data))

all_historical = [x[0] for x in historical_data]
all_historical_identifiers = [x[1] for x in historical_data]

csv = env.HISTORICAL_to_CSV(
    source = all_historical,
    target = "${ORIGINAL_WORK_DIR}/historical_test/results.csv",
    IDENTIFIERS = all_historical_identifiers,
    **cpu_task_config("HISTORICAL_to_CSV", "00:30:00", "24GB")
)
"""



